#!/usr/bin/env python
# coding: utf-8
import sys  # system io
import argparse  # command line arguments
import itertools
from PIL import Image  # image processing

# Gradient mappings, orgonized by character weight.
# The keys are taken from the -g command line argument.
gradients = {
    'x': ' +X#',
    'o': ' .*cO@',
    'box': u' ░▒▓█',
    'hearts': u' ❤♥',
    'dots': u'⠐⠔⠪⡪⢗⣝⣯⣿'}


def img_to_text(img_path, columns=80, gradient=' +X#'):
    '''Converts an image to a textual approximation.
    Returns a row-by-row generator.
    '''
    # The PIL (Python Image Lybrary) handles the image processing
    # for all the common image formats.
    try:
        raw_image = Image.open(img_path)
    except IOError:
        # PIL could not process the file
        sys.stderr.write('Failed to open {}, perhaps it is not an image\n'
                         .format(img_path))
        sys.exit(1)

    # Calculate the height in rows. Multiply by 66% to achieve a percieved 1:1
    # ratio.
    rows = raw_image.size[1] * (columns * 66 // 100) / raw_image.size[0]
    # Resize and convert to greyscale - (L)ightness
    image = raw_image.resize((columns, rows),  Image.ANTIALIAS).convert("L")

    width, height = image.size
    all_pixels = dict(
        (xy, image.getpixel(xy))
        for xy in itertools.product(xrange(width), xrange(height)))

    # Since we don't have a lot of granularity calculating the min/max
    # brightness and calcuating the scale between them yields better results.
    darkest, lightest = min(all_pixels.values()), max(all_pixels.values()) + 1
    for y in xrange(height):
        yield ''.join(
            gradient[(all_pixels[(x, y)] - darkest) * len(gradient) // lightest]
            for x in xrange(width))


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description=img_to_text.__doc__)
    parser.add_argument('image_path')
    parser.add_argument('-w', '--width', type=int, default=80)
    parser.add_argument('-g', '--gradient', type=str, default='x')
    parser.add_argument('-c', '--custom_gradient', type=str)
    args = parser.parse_args()
    if args.custom_gradient:
        gradient = args.custom_gradient
    else:
        gradient = gradients[args.gradient]
    for line in img_to_text(args.image_path, args.width, gradient):
        print line
